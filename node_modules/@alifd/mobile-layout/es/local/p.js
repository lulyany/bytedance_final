var _excluded = ["type", "className", "beforeMargin", "afterMargin", "align", "verAlign", "spacing", "verMargin", "style", "children"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * 段落
 */
import { createElement, useContext } from 'rax';
import classNames from 'classnames';
import Children from 'rax-children';
import View from '../common/view';
import Context from '../common/context';
import Text from './text';
import { wrapUnit } from '../utils';
import useGuid from '../utils/hooks/use-guid';

var getNewChildren = function (children, clsPrefix, type, pid) {
  // 如果无 children, 依然保持空行
  if (!children) {
    return createElement(Text, {
      className: clsPrefix + "-text"
    }, " ");
  }

  return Children.map(children, function (child, index) {
    // 包裹文本节点已处理各方向上间距
    if (typeof child === 'string') {
      return createElement(Text, {
        key: pid + "-" + index,
        className: clsPrefix + "-text",
        type: type
      }, child);
    }

    return child;
  });
};
/**
 * 段落布局，自动为段落内元素增加横向和垂直间距，并支持多种模式对齐
 */


var P = function (props) {
  var _classNames;

  var type = props.type,
      className = props.className,
      beforeMargin = props.beforeMargin,
      afterMargin = props.afterMargin,
      align = props.align,
      verAlign = props.verAlign,
      spacing = props.spacing,
      verMargin = props.verMargin,
      style = props.style,
      children = props.children,
      others = _objectWithoutPropertiesLoose(props, _excluded);

  var _useContext = useContext(Context),
      prefix = _useContext.prefix;

  var pid = useGuid('pid');
  var clsPrefix = prefix + "p";
  var paragraphCls = classNames(clsPrefix, className, (_classNames = {}, _classNames[clsPrefix + "-spacing"] = spacing !== false, _classNames[clsPrefix + "-align--" + align] = align, _classNames[clsPrefix + "-valign--" + verAlign] = verAlign, _classNames[clsPrefix + "-spacing--" + align] = spacing && align, _classNames[clsPrefix + "-spacing--" + spacing] = ['small', 'medium', 'large'].indexOf(spacing) > -1, _classNames[clsPrefix + "-margin"] = verMargin, _classNames[clsPrefix + "--" + type] = type, _classNames));

  var newStyle = _extends({
    marginTop: wrapUnit(beforeMargin),
    marginBottom: wrapUnit(afterMargin)
  }, style);

  return createElement(View, _extends({}, others, {
    className: paragraphCls,
    style: newStyle
  }), getNewChildren(children, clsPrefix, type, pid));
};

P.displayName = 'P';
P._typeMark = 'P';
P.defaultProps = {
  spacing: 'medium',
  verMargin: true,
  verAlign: 'middle',
  beforeMargin: 0,
  afterMargin: 0
};
export default P;