var _excluded = ["children", "className", "verAlign", "style", "width", "height", "gap"],
    _excluded2 = ["width"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { createElement, useContext } from 'rax';
import Children from 'rax-children';
import classNames from 'classnames';
import isValidElement from 'rax-is-valid-element';
import cloneElement from 'rax-clone-element';
import Context from '../common/context';
import { VER_ALIGN_ALIAS_MAP } from '../common/constant';
import { getGapVal, isValidGap, wrapUnit } from '../utils';

var RowFlex = function (props) {
  var children = props.children,
      className = props.className,
      verAlign = props.verAlign,
      style = props.style,
      width = props.width,
      height = props.height,
      gapProp = props.gap,
      others = _objectWithoutPropertiesLoose(props, _excluded);

  var _useContext = useContext(Context),
      prefix = _useContext.prefix,
      gridGap = _useContext.gridGap;

  var gap = getGapVal(gridGap, gapProp);
  var newChildren = Children.map(children, function (child, index) {
    if (isValidElement(child)) {
      var _child$props = child == null ? void 0 : child.props,
          childWidth = _child$props.width,
          autoFit = _child$props.autoFit,
          childStyle = _child$props.style;

      var _ref = childStyle || {},
          childStyleWidth = _ref.width,
          otherChildStyle = _objectWithoutPropertiesLoose(_ref, _excluded2);

      var flex;
      var validWidth;

      if (childWidth && childWidth !== '') {
        validWidth = childWidth;
      } else if (childStyleWidth && childStyleWidth !== '') {
        validWidth = childStyle.width;
      }

      if (autoFit) {
        flex = '0 0 auto';
      } else if (validWidth) {
        flex = "0 0 " + wrapUnit(validWidth);
      } else {
        flex = '1 1 0';
      }

      return cloneElement(child, _extends({}, child == null ? void 0 : child.props, {
        key: "layout-row-flex-" + index,
        style: _extends({
          flex: flex
        }, otherChildStyle)
      }));
    }

    return child;
  });

  var newStyle = _extends({
    alignItems: VER_ALIGN_ALIAS_MAP[verAlign] || verAlign
  }, isValidGap(gap) && gap !== 'auto' ? {
    gap: wrapUnit(gap)
  } : null, width && width > 0 ? {
    width: wrapUnit(width)
  } : null, height && height > 0 ? {
    height: wrapUnit(height)
  } : null, style);

  return createElement("div", _extends({}, others, {
    className: classNames(className, prefix + "row-flex"),
    style: newStyle
  }), newChildren);
};

RowFlex.displayName = 'RowFlex';
export default RowFlex;