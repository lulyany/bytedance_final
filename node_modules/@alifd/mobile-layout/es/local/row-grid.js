var _excluded = ["children", "style", "width", "height", "gap"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { createElement } from 'rax';
import Children from 'rax-children';
import isValidElement from 'rax-is-valid-element';
import { wrapUnit } from '../utils';
import Grid from './grid';

var RowGrid = function (props) {
  var children = props.children,
      style = props.style,
      width = props.width,
      height = props.height,
      gap = props.gap,
      others = _objectWithoutPropertiesLoose(props, _excluded);

  var rows = [];
  var newChildren = Children.map(children, function (child) {
    if (!child) {
      return null;
    }

    if (isValidElement(child)) {
      var _child$props = child.props,
          childStyle = _child$props.style,
          childWidth = _child$props.width,
          autoFit = _child$props.autoFit;
      var validWidth;

      if (childStyle != null && childStyle.width && (childStyle == null ? void 0 : childStyle.width) !== '') {
        validWidth = childStyle.width;
      } else if (childWidth && childStyle !== '') {
        validWidth = childWidth;
      }

      if (autoFit) {
        rows.push('auto');
      } else if (validWidth) {
        rows.push(wrapUnit(validWidth));
      } else {
        rows.push('1fr');
      }
    } else {
      rows.push('auto');
    }

    return child;
  });

  var newStyle = _extends({
    gridTemplateColumns: rows.map(function (c) {
      return wrapUnit(c, 'fr');
    }).join(' '),
    justifyContent: 'stretch'
  }, width && width > 0 ? {
    width: wrapUnit(width)
  } : null, height && height > 0 ? {
    height: wrapUnit(height)
  } : null, style);

  return createElement(Grid, _extends({}, others, {
    cols: 1,
    colGap: gap,
    align: "stretch",
    style: newStyle
  }), newChildren);
};

RowGrid.displayName = 'RowGrid';
export default RowGrid;