var _excluded = ["className", "children", "title", "noPadding", "extra", "gap", "style"];
import { createCondition as __create_condition__ } from "babel-runtime-jsx-plus";

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* @jsx createElement */
import { createElement, useContext } from 'rax';
import classNames from 'classnames';
import Children from 'rax-children';
import cloneElement from 'rax-clone-element';
import Context from '../common/context';
import View from '../common/view';
import { wrapUnit, isString, isValidGap, getGapVal } from '../utils';
import Row from '../local/row';
import Col from '../local/col';
import P from '../local/p';
import Block from './block';
import Cell from './cell';
import useGuid from '../utils/hooks/use-guid';

/**
 * 获取计算后的子节点
 * @param children
 * @param numberOfColumns
 * @param maxNumberOfColumns
 * @param sid
 */
function getValidChildren(children, numberOfColumns, maxNumberOfColumns, sid) {
  var newChildren = wrapBlock(children, maxNumberOfColumns);
  return calBlockSpan(newChildren, numberOfColumns, sid);
}
/**
 * 为非 Block 节点，包裹 Block 子元素
 * @param children
 * @param maxNumberOfColumns
 * @return RaxNode[]
 */


function wrapBlock(children, maxNumberOfColumns) {
  var tmp = [];
  var ret = [];
  var validChildList = Children.toArray(children).filter(function (child) {
    return !!child;
  });
  validChildList.forEach(function (child, index) {
    if (child.type === Block) {
      ret.push(child);

      if (tmp.length > 0) {
        ret.push(createElement(Block, {
          span: maxNumberOfColumns
        }, [].concat(tmp)));
        tmp = [];
      }
    } else {
      tmp.push(child);
    }

    if (index === validChildList.length - 1 && tmp.length > 0) {
      ret.push(createElement(Block, {
        span: maxNumberOfColumns
      }, [].concat(tmp)));
      tmp = [];
    }
  });
  return ret;
}
/**
 * 为 Block 自动调整列宽
 * @param children
 * @param numberOfColumns
 * @param sid
 */


function calBlockSpan(children, numberOfColumns, sid) {
  var ret = [];
  var stack = [];
  var counter = 0;
  var len = children.length;

  for (var i = 0; i < len; i++) {
    var child = children[i];
    var span = child.props.span;
    var gid = sid + "-" + numberOfColumns + "-" + i;

    if (span < numberOfColumns) {
      if (span + counter <= numberOfColumns) {
        stack.push(child);
        counter += span;
      } else {
        ret = [].concat(ret, adjustColWidth(stack, counter, numberOfColumns, gid));
        stack = [child];
        counter = span;
      }
    } else {
      if (stack.length > 0) {
        ret = [].concat(ret, adjustColWidth(stack, counter, numberOfColumns, gid));
        stack = [];
        counter = 0;
      }

      ret = [].concat(ret, adjustColWidth([child], numberOfColumns, numberOfColumns, gid + "-r2"));
    }

    if (i === len - 1 && stack.length > 0) {
      ret = [].concat(ret, adjustColWidth(stack, counter, numberOfColumns, gid + "-last"));
    }
  }

  return ret;
}
/**
 * 重算列宽
 * @param blockNodes
 * @param totalSpan
 * @param maxColNum
 * @param sid
 */


function adjustColWidth(blockNodes, totalSpan, maxColNum, sid) {
  return blockNodes.map(function (item, index) {
    var span = item.props.span;
    return cloneElement(item, _extends({}, item.props, {
      id: sid + "-" + index,
      key: sid + "-" + index,
      span: Math.round(span / totalSpan * maxColNum)
    }));
  });
}
/**
 * 章节
 * @param props
 */


var Section = function (props) {
  var _classNames, _classNames2;

  var _useContext = useContext(Context),
      prefix = _useContext.prefix,
      blockGapContext = _useContext.blockGap,
      _useContext$breakPoin = _useContext.breakPoint,
      numberOfColumns = _useContext$breakPoin.numberOfColumns,
      maxContentWidth = _useContext$breakPoin.maxContentWidth,
      maxNumberOfColumns = _useContext.maxNumberOfColumns;

  var className = props.className,
      children = props.children,
      title = props.title,
      noPadding = props.noPadding,
      extra = props.extra,
      blockGapProp = props.gap,
      style = props.style,
      others = _objectWithoutPropertiesLoose(props, _excluded);

  var clsPrefix = prefix + "section";
  var bid = useGuid('sc');
  var gap = getGapVal(blockGapContext, blockGapProp);
  var sectionCls = classNames(clsPrefix, className);
  var blockWrapperCls = classNames((_classNames = {}, _classNames[clsPrefix + "-block-wrapper"] = true, _classNames[prefix + "block--auto"] = gap === 'auto', _classNames));
  var ctnWithHeadCls = classNames(clsPrefix + "-inner", clsPrefix + "-inner--with-head", (_classNames2 = {}, _classNames2[prefix + "block--auto"] = gap === 'auto', _classNames2[clsPrefix + "-no-padding"] = noPadding, _classNames2));
  var ctnWithoutHeadCls = classNames(clsPrefix + "-inner", clsPrefix + "-inner-without-head");

  var blockStyle = _extends({}, isValidGap(gap) && gap !== 'auto' ? {
    gridColumnGap: wrapUnit(gap),
    gridRowGap: wrapUnit(gap)
  } : null, style);

  var blockWrapperStyle = _extends({}, isValidGap(gap) && gap !== 'auto' ? {
    gridColumnGap: wrapUnit(gap),
    gridRowGap: wrapUnit(gap)
  } : null);

  var innerStyle = {
    maxWidth: wrapUnit(maxContentWidth, 'px')
  };

  if (title || extra) {
    return createElement(View, _extends({}, others, {
      className: classNames(clsPrefix, className)
    }), createElement(View, {
      className: ctnWithHeadCls,
      style: innerStyle
    }, createElement(Col, {
      align: "stretch"
    }, createElement(Row, {
      autoFit: true,
      verAlign: "middle",
      className: clsPrefix + "-head"
    }, __create_condition__([[function () {
      return title;
    }, function () {
      return createElement(Cell, {
        className: clsPrefix + "-title"
      }, isString(title) ? createElement(P, {
        align: "left",
        type: "body1"
      }, title) : title);
    }]]), __create_condition__([[function () {
      return extra;
    }, function () {
      return createElement(Cell, {
        autoFit: true,
        align: "right",
        className: clsPrefix + "-extra"
      }, isString(extra) ? createElement(P, {
        align: "right",
        type: "body2"
      }, extra) : extra);
    }]])), createElement(Cell, null, createElement("div", {
      className: blockWrapperCls,
      style: blockWrapperStyle
    }, getValidChildren(children, numberOfColumns, maxNumberOfColumns, bid))))));
  }

  return createElement(View, _extends({}, others, {
    className: sectionCls,
    style: blockStyle
  }), createElement(View, {
    className: classNames(ctnWithoutHeadCls, blockWrapperCls),
    style: _extends({}, blockWrapperStyle, innerStyle)
  }, getValidChildren(children, numberOfColumns, maxNumberOfColumns, bid)));
};

Section.displayName = 'Section';
Section._typeMark = 'Section';
export default Section;