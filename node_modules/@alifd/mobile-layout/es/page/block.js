var _excluded = ["className", "title", "titleAlign", "extra", "noPadding", "mode", "bordered", "span", "contentStyle", "contentClassName", "align", "verAlign", "divider", "children"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { createCondition as __create_condition__ } from "babel-runtime-jsx-plus";

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { createElement, useContext } from 'rax';
import classNames from 'classnames';
import Context from '../common/context';
import Cell from './cell';
import Row from '../local/row';
import P from '../local/p'; // import View from '../common/view';

import Col from '../local/col';
import { isString } from '../utils';

/**
 * 区块,默认 flex 布局
 * @param props
 * @constructor
 */
var Block = function (props) {
  var _classNames, _classNames2, _classNames3;

  var className = props.className,
      title = props.title,
      titleAlign = props.titleAlign,
      extra = props.extra,
      noPaddingProp = props.noPadding,
      mode = props.mode,
      bordered = props.bordered,
      spanProp = props.span,
      contentStyle = props.contentStyle,
      contentClassName = props.contentClassName,
      align = props.align,
      verAlign = props.verAlign,
      divider = props.divider,
      children = props.children,
      others = _objectWithoutPropertiesLoose(props, _excluded);

  var _useContext = useContext(Context),
      prefix = _useContext.prefix,
      maxNumberOfColumns = _useContext.maxNumberOfColumns;

  var isTransparent = mode === 'transparent';
  var noPadding = !isTransparent ? noPaddingProp : true;
  var clsPrefix = prefix + "block"; // 当有 title 或 extra 节点时

  var hasHead = !isTransparent && (title || extra);
  var span = spanProp; // 保证 span 无效时, 撑满整行 section

  if (!span || span > maxNumberOfColumns || span <= 0) {
    span = maxNumberOfColumns;
  }

  var blockCls = classNames(className, (_classNames = {}, _classNames[prefix + "block"] = true, _classNames[prefix + "bg--" + mode] = mode && !isTransparent, _classNames[prefix + "block--span-" + span] = span > 0, _classNames[prefix + "block--headless"] = !hasHead, _classNames[prefix + "block--no-padding"] = noPadding, _classNames[prefix + "block--bordered"] = bordered, _classNames));
  var headCls = classNames((_classNames2 = {}, _classNames2[clsPrefix + "-head"] = true, _classNames2[clsPrefix + "--divided"] = divider && hasHead, _classNames2));
  var blockContentCls = classNames(contentClassName, (_classNames3 = {}, _classNames3[prefix + "block-content"] = true, _classNames3[prefix + "block-content--no-padding"] = noPadding, _classNames3));

  if (hasHead) {
    return createElement(Col, _extends({}, others, {
      className: blockCls
    }), createElement(Row, {
      autoFit: true,
      verAlign: "middle",
      className: headCls
    }, __create_condition__([[function () {
      return title;
    }, function () {
      return createElement(Cell, {
        className: prefix + "block-title",
        align: titleAlign
      }, isString(title) ? createElement(P, {
        type: "body1",
        align: "left"
      }, title) : title);
    }]]), __create_condition__([[function () {
      return extra;
    }, function () {
      return createElement(Cell, {
        autoFit: true,
        align: "right",
        className: prefix + "block-extra"
      }, isString(extra) ? createElement(P, {
        type: "body2",
        align: "right"
      }, extra) : extra);
    }]])), createElement(Cell, {
      align: align,
      verAlign: verAlign,
      className: blockContentCls,
      style: contentStyle
    }, children));
  }

  return createElement(Cell, _extends({}, others, {
    className: blockCls
  }), children);
};

Block.displayName = 'Block';
Block._typeMark = 'Block';
Block.defaultProps = {
  mode: 'surface',
  noPadding: false
};
export default Block;