"use strict";

exports.__esModule = true;
exports.default = void 0;

var _rax = require("rax");

var _raxChildren = _interopRequireDefault(require("rax-children"));

var _raxIsValidElement = _interopRequireDefault(require("rax-is-valid-element"));

var _utils = require("../utils");

var _grid = _interopRequireDefault(require("./grid"));

var _excluded = ["children", "style", "width", "height", "gap"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var RowGrid = function (props) {
  var children = props.children,
      style = props.style,
      width = props.width,
      height = props.height,
      gap = props.gap,
      others = _objectWithoutPropertiesLoose(props, _excluded);

  var rows = [];

  var newChildren = _raxChildren.default.map(children, function (child) {
    if (!child) {
      return null;
    }

    if ((0, _raxIsValidElement.default)(child)) {
      var _child$props = child.props,
          childStyle = _child$props.style,
          childWidth = _child$props.width,
          autoFit = _child$props.autoFit;
      var validWidth;

      if (childStyle != null && childStyle.width && (childStyle == null ? void 0 : childStyle.width) !== '') {
        validWidth = childStyle.width;
      } else if (childWidth && childStyle !== '') {
        validWidth = childWidth;
      }

      if (autoFit) {
        rows.push('auto');
      } else if (validWidth) {
        rows.push((0, _utils.wrapUnit)(validWidth));
      } else {
        rows.push('1fr');
      }
    } else {
      rows.push('auto');
    }

    return child;
  });

  var newStyle = _extends({
    gridTemplateColumns: rows.map(function (c) {
      return (0, _utils.wrapUnit)(c, 'fr');
    }).join(' '),
    justifyContent: 'stretch'
  }, width && width > 0 ? {
    width: (0, _utils.wrapUnit)(width)
  } : null, height && height > 0 ? {
    height: (0, _utils.wrapUnit)(height)
  } : null, style);

  return (0, _rax.createElement)(_grid.default, _extends({}, others, {
    cols: 1,
    colGap: gap,
    align: "stretch",
    style: newStyle
  }), newChildren);
};

RowGrid.displayName = 'RowGrid';
var _default = RowGrid;
exports.default = _default;