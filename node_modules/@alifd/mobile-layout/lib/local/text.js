"use strict";

exports.__esModule = true;
exports.default = void 0;

var _rax = require("rax");

var _classnames = _interopRequireDefault(require("classnames"));

var _context = _interopRequireDefault(require("../common/context"));

var _excluded = ["type", "className", "children", "mark", "underline", "strong", "code", "backgroundColor", "delete", "indented", "color", "style"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Text = function (props) {
  var _classNames;

  var type = props.type,
      className = props.className,
      children = props.children,
      _props$mark = props.mark,
      mark = _props$mark === void 0 ? false : _props$mark,
      _props$underline = props.underline,
      underline = _props$underline === void 0 ? false : _props$underline,
      _props$strong = props.strong,
      strong = _props$strong === void 0 ? false : _props$strong,
      _props$code = props.code,
      code = _props$code === void 0 ? false : _props$code,
      backgroundColor = props.backgroundColor,
      del = props.delete,
      indented = props.indented,
      color = props.color,
      style = props.style,
      others = _objectWithoutPropertiesLoose(props, _excluded);

  var _useContext = (0, _rax.useContext)(_context.default),
      prefix = _useContext.prefix;

  var clsPrefix = prefix + "text";
  var textCls = (0, _classnames.default)("" + clsPrefix, className, clsPrefix + "--" + type, (_classNames = {}, _classNames[clsPrefix + "--mark"] = mark, _classNames[clsPrefix + "--underline"] = underline, _classNames[clsPrefix + "--strong"] = strong, _classNames[clsPrefix + "--code"] = code, _classNames[clsPrefix + "--delete"] = del, _classNames[clsPrefix + "--" + type + "-indented"] = indented, _classNames));

  var newStyle = _extends({}, color ? {
    color: color
  } : null, backgroundColor ? {
    backgroundColor: backgroundColor
  } : null, style);

  return (0, _rax.createElement)("span", _extends({}, others, {
    className: textCls,
    style: newStyle
  }), children);
};

Text.displayName = 'Text';
Text._typeMark = 'Text';
Text.defaultProps = {
  type: 'body1'
};
var _default = Text;
exports.default = _default;