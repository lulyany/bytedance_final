"use strict";

exports.__esModule = true;
exports.default = void 0;

var _rax = require("rax");

var _classnames = _interopRequireDefault(require("classnames"));

var _raxChildren = _interopRequireDefault(require("rax-children"));

var _raxIsValidElement = _interopRequireDefault(require("rax-is-valid-element"));

var _raxCloneElement = _interopRequireDefault(require("rax-clone-element"));

var _context = _interopRequireDefault(require("../common/context"));

var _constant = require("../common/constant");

var _utils = require("../utils");

var _excluded = ["children", "width", "height", "className", "align", "gap", "style"],
    _excluded2 = ["height", "style", "autoFit"],
    _excluded3 = ["height"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ColFlex = function (props) {
  var children = props.children,
      width = props.width,
      height = props.height,
      className = props.className,
      align = props.align,
      gapProp = props.gap,
      style = props.style,
      others = _objectWithoutPropertiesLoose(props, _excluded);

  var _useContext = (0, _rax.useContext)(_context.default),
      prefix = _useContext.prefix,
      gridGap = _useContext.gridGap;

  var gap = (0, _utils.getGapVal)(gridGap, gapProp);

  var newChildren = _raxChildren.default.map(children, function (child, index) {
    if ((0, _raxIsValidElement.default)(child)) {
      var _child$props = child == null ? void 0 : child.props,
          childHeight = _child$props.height,
          childStyle = _child$props.style,
          childAutoFit = _child$props.autoFit,
          otherChildProps = _objectWithoutPropertiesLoose(_child$props, _excluded2);

      var _ref = childStyle || {},
          childStyleHeight = _ref.height,
          otherChildStyle = _objectWithoutPropertiesLoose(_ref, _excluded3);

      var flex;
      var validHeight;

      if (childHeight && childHeight !== '') {
        validHeight = childHeight;
      }

      if (childStyleHeight && childStyleHeight !== '') {
        validHeight = childStyle.height;
      }

      if (childAutoFit || validHeight) {
        flex = "0 0 auto";
      } else {
        flex = '1 1 0';
      }

      return (0, _raxCloneElement.default)(child, _extends({}, otherChildProps, {
        key: "layout-col-flex-" + index,
        height: validHeight,
        style: _extends({
          flex: flex
        }, otherChildStyle)
      }));
    }

    return child;
  });

  var newStyle = _extends({
    alignItems: _constant.ALIGN_ALIAS_MAP[align] || align,
    justifyContent: 'stretch'
  }, width && width > 0 ? {
    width: (0, _utils.wrapUnit)(width)
  } : null, height && height > 0 ? {
    height: (0, _utils.wrapUnit)(height)
  } : null, (0, _utils.isValidGap)(gap) && gap !== 'auto' ? {
    gap: gap
  } : null, style);

  return (0, _rax.createElement)("div", _extends({}, others, {
    className: (0, _classnames.default)(className, prefix + "col-flex"),
    style: newStyle
  }), newChildren);
};

ColFlex.displayName = 'ColFlex';
var _default = ColFlex;
exports.default = _default;