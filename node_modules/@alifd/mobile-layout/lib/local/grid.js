"use strict";

exports.__esModule = true;
exports.default = void 0;

var _rax = require("rax");

var _classnames = _interopRequireDefault(require("classnames"));

var _context = _interopRequireDefault(require("../common/context"));

var _view = _interopRequireDefault(require("../common/view"));

var _utils = require("../utils");

var _excluded = ["className", "children", "style", "align", "verAlign", "renderItem", "rows", "cols", "rowGap", "colGap", "minWidth", "maxWidth"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * 网格布局
 * @param props
 * @constructor
 */
var Grid = function (props) {
  var _classNames;

  var className = props.className,
      children = props.children,
      style = props.style,
      alignProp = props.align,
      verAlignProp = props.verAlign,
      renderItem = props.renderItem,
      rows = props.rows,
      cols = props.cols,
      rowGapProp = props.rowGap,
      colGapProp = props.colGap,
      minWidth = props.minWidth,
      maxWidth = props.maxWidth,
      others = _objectWithoutPropertiesLoose(props, _excluded);

  var _useContext = (0, _rax.useContext)(_context.default),
      prefix = _useContext.prefix,
      gridGap = _useContext.gridGap; // 行列 gap 判断顺序：rowGap > Context.gridGap > default:'medium'


  var rowGap = (0, _utils.getGapVal)(gridGap, rowGapProp);
  var colGap = (0, _utils.getGapVal)(gridGap, colGapProp);
  var gridTemplateColumns = "repeat(" + cols + ", 1fr)";

  if (minWidth && maxWidth) {
    gridTemplateColumns = "repeat(auto-fill, minmax(" + (0, _utils.wrapUnit)(minWidth) + ", " + (0, _utils.wrapUnit)(maxWidth) + "))";
  } else if (minWidth && !maxWidth) {
    gridTemplateColumns = "repeat(auto-fit, minmax(" + (0, _utils.wrapUnit)(minWidth) + ", auto))";
  } else if (!minWidth && maxWidth) {
    gridTemplateColumns = "repeat(auto-fill, minmax(auto, " + (0, _utils.wrapUnit)(maxWidth) + "))";
  }

  var newStyle = _extends({
    display: 'grid',
    gridTemplateColumns: gridTemplateColumns,
    gridTemplateRows: "repeat(" + rows + ", 1fr)"
  }, (0, _utils.isValidGap)(rowGap) && rowGap !== 'auto' ? {
    gridRowGap: rowGap
  } : null, (0, _utils.isValidGap)(colGap) && colGap !== 'auto' ? {
    gridColumnGap: colGap
  } : null, style); // notice: 小程序渲染的特殊性， justifyItems 和 alignItems 无法在 style 中写入


  var align = alignProp;
  var valign = verAlignProp;
  return (0, _rax.createElement)(_view.default, _extends({}, others, {
    className: (0, _classnames.default)(className, prefix + "grid", (_classNames = {}, _classNames[prefix + "grid-align--" + align] = align, _classNames[prefix + "grid-valign--" + valign] = valign, _classNames)),
    style: newStyle
  }), renderItem ? function renderChildren() {
    return Array.from(new Array(rows)).map(function (_, row) {
      return Array.from(new Array(cols)).map(function (__, col) {
        return renderItem(row, col);
      });
    });
  }() : children);
};

Grid.displayName = 'Grid';
Grid._typeMark = 'Grid';
Grid.defaultProps = {
  spacing: 'medium',
  rows: 1,
  cols: 1,
  verAlign: 'stretch',
  align: 'stretch'
};
var _default = Grid;
exports.default = _default;