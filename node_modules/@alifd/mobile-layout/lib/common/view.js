"use strict";

exports.__esModule = true;
exports.default = void 0;

var _rax = require("rax");

var _classnames = _interopRequireDefault(require("classnames"));

var _env = require("@uni/env");

var _excluded = ["onFirstAppear", "className", "onAppear", "withoutTouch"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var isStrictMiniApp = !_env.isWeb && _env.isMiniApp;
var View = (0, _rax.forwardRef)(function (props, ref) {
  var selfRef = (0, _rax.useRef)(null); // automatically remove onTouch* events on view template. set withoutTouch=false to add all events in miniapp
  // by the way: you should remove all unnecessary events on view template in 'root.axml'

  var onFirstAppear = props.onFirstAppear,
      className = props.className,
      onAppear = props.onAppear,
      _props$withoutTouch = props.withoutTouch,
      withoutTouch = _props$withoutTouch === void 0 ? true : _props$withoutTouch,
      rest = _objectWithoutPropertiesLoose(props, _excluded);

  var newClsName = (0, _classnames.default)(className);

  if (isStrictMiniApp) {
    // For miniapp runtime pre-compile
    return withoutTouch ? (0, _rax.createElement)("view", _extends({}, rest, {
      className: newClsName,
      onAppear: onAppear,
      onDisappear: rest.onDisappear,
      onFirstAppear: onFirstAppear // @ts-ignore
      ,
      ref: ref
    })) : (0, _rax.createElement)("div", _extends({}, rest, {
      className: newClsName,
      onAppear: onAppear,
      onDisappear: rest.onDisappear,
      onFirstAppear: onFirstAppear,
      ref: ref
    }));
  }

  var handleAppear = onAppear;

  if (onFirstAppear) {
    handleAppear = function (event) {
      if (onAppear) {
        onAppear(event);
      }

      if (!selfRef.triggeredAppear) {
        if (onFirstAppear) {
          onFirstAppear(event);
        }
      } else {
        selfRef.triggeredAppear = true;
      }
    };
  }

  return (0, _rax.createElement)("div", _extends({}, rest, {
    className: newClsName,
    onAppear: handleAppear,
    ref: ref
  }));
});
View.displayName = 'View';
var _default = View;
exports.default = _default;