"use strict";

exports.__esModule = true;
exports.getCurBreakPoint = getCurBreakPoint;
exports.getGapVal = getGapVal;
exports.getMaxNumberOfColumns = getMaxNumberOfColumns;
exports.isNumber = isNumber;
exports.isString = isString;
exports.isValidGap = isValidGap;
exports.throttle = throttle;
exports.wrapUnit = wrapUnit;

var _constant = require("../common/constant");

var _systemInfo = require("@uni/system-info");

/**
 * 是否为字符串
 * @param str
 */
function isString(str) {
  return typeof str === 'string';
}

function isNumber(num) {
  if (num === '' || num === null) {
    return false;
  }

  return typeof num === 'number' && !isNaN(num) || !isNaN(Number(num));
}
/**
 * 获取当前屏幕断点
 * @param breakPoints
 */


function getCurBreakPoint(breakPoints) {
  var screenWidths = [];
  var tmpMap = {};
  var availWidth = (0, _systemInfo.getInfoSync)().screenWidth;
  breakPoints.forEach(function (bp) {
    var width = bp.width;
    screenWidths.push(width);
    tmpMap[width] = bp;
  });
  screenWidths = screenWidths.sort(function (a, b) {
    return a - b;
  });
  var len = screenWidths.length;
  var ret = tmpMap[screenWidths[0]];

  if (availWidth > screenWidths[len - 1]) {
    ret = tmpMap[screenWidths[len - 1]];
  } else {
    for (var i = 1; i < len; i++) {
      var breakPoint = tmpMap[screenWidths[i]];

      if (screenWidths[i - 1] <= availWidth && availWidth < screenWidths[i]) {
        ret = breakPoint;
      }
    }
  }

  return ret;
}
/**
 * 获取最大断点列数
 */


function getMaxNumberOfColumns(breakPoints) {
  if (breakPoints === void 0) {
    breakPoints = _constant.DEFAULT_BREAK_POINTS;
  }

  var screenWidths = breakPoints.map(function (bp) {
    return bp.width;
  });
  var maxWidth = Math.max.apply(Math, screenWidths);
  return breakPoints.find(function (bp) {
    return bp.width === maxWidth;
  }).numberOfColumns;
}
/**
 * 为数值包裹自动单位
 * @param value
 * @param unit
 */


function wrapUnit(value, unit) {
  if (unit === void 0) {
    unit = 'rpx';
  }

  return isNumber(value) ? "" + value + unit : value;
}
/**
 * 是否为一个有效的 gap 值:
 * eg: 0.9 / -9px / auto
 * @param val
 */


function isValidGap(val) {
  return isNumber(val) || isString(val) && (/^[-]?[0-9]*\.?[0-9]+([a-z|A-z]*)$/.test(val) || val === 'auto');
}
/**
 * 获取最终的 gap 值
 * @param contextGap 上下文中的 gap 值
 * @param propGap 属性中定义的 gap 值
 */


function getGapVal(contextGap, propGap) {
  if (isValidGap(propGap)) {
    return wrapUnit(propGap);
  } else if (isValidGap(contextGap)) {
    return wrapUnit(contextGap);
  }

  return null;
}
/**
 * 简单节流函数
 * @param fn
 * @param delay
 */


function throttle(fn, delay) {
  if (delay === void 0) {
    delay = 1000 / 60;
  }

  var timer = null; // eslint-disable-next-line @typescript-eslint/no-this-alias

  var that = this;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (!timer) {
      if (typeof window.requestAnimationFrame !== 'undefined') {
        timer = window.requestAnimationFrame(function () {
          fn.apply(that, [].concat(args));
          timer = null;
        });
      } else {
        timer = setTimeout(function () {
          fn.apply(that, [].concat(args));
          timer = null;
        }, delay);
      }
    }
  };
}